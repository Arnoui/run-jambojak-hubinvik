0: FUNSTART main 
1: PUSH_NUMBER -2147483646 
2: STORE_VAR 0 MIN_INT int 
3: PUSH_STRING 9100 15 200 6 247 2 210 8 163 1 93 44 255 7 244 28 190 5 117 16 234 9 105 3 29 12 135 35 96 18 203 45 238
4: STORE_VAR 1 strInput String 
5: PUSH_STRING ~ 
6: STORE_VAR 2 delim String 
7: LOAD_VAR 1 
8: LOAD_VAR 2 
9: FUNCALL split 
10: STORE_VAR 3 input int_array 
11: LOAD_ARRAY 3 1 
12: STORE_VAR 4 len int 
13: LOAD_ARRAY 3 2 
14: STORE_VAR 5 maxWeight int 
15: LOAD_VAR 4 
16: NEW_ARRAY 6 int_array 
17: LOAD_VAR 4 
18: NEW_ARRAY 7 int_array 
19: LOAD_VAR 4 
20: NEW_ARRAY 8 int_array 
21: PUSH_NUMBER 0 
22: STORE_VAR 9 j int 
23: JUMP 46 
24: PUSH_NUMBER 3 
25: LOAD_VAR 9 
26: PUSH_NUMBER 2 
27: MULTIPLY
28: PLUS
29: STORE_VAR 10 idx int 
30: LOAD_ARRAY 3 idx 
31: STORE_VAR 11 weight int 
32: LOAD_VAR 11 
33: STORE_ARRAY 6 j 
34: LOAD_VAR 10 
35: PUSH_NUMBER 1 
36: PLUS
37: STORE_VAR 12 idx2 int 
38: LOAD_ARRAY 3 idx2 
39: STORE_VAR 13 cost int 
40: LOAD_VAR 13 
41: STORE_ARRAY 7 j 
42: LOAD_VAR 9 
43: PUSH_NUMBER 1 
44: PLUS
45: STORE_VAR 9 j int 
46: LOAD_VAR 9 
47: LOAD_VAR 4 
48: IF_LT_JUMP 24 
49: LOAD_VAR 6 
50: LOAD_VAR 7 
51: LOAD_VAR 8 
52: PUSH_NUMBER 0 
53: LOAD_VAR 5 
54: LOAD_VAR 4 
55: FUNCALL permute 
56: STORE_VAR 14 result int 
0: FUNSTART permute int len int maxWeight int depth int_array permutations int_array costs int_array weights  
1: STORE_VAR 0 len int 
2: STORE_VAR 1 maxWeight int 
3: STORE_VAR 2 depth int 
4: STORE_VAR 3 permutations int_array 
5: STORE_VAR 4 costs int_array 
6: STORE_VAR 5 weights int_array 
7: LOAD_VAR 2 
8: LOAD_VAR 0 
9: PUSH_NUMBER 1 
10: MINUS
11: IF_GTE_JUMP 46 
12: PUSH_NUMBER 0 
13: STORE_ARRAY 3 depth 
14: LOAD_VAR 5 
15: LOAD_VAR 4 
16: LOAD_VAR 3 
17: LOAD_VAR 2 
18: PUSH_NUMBER 1 
19: PLUS
20: LOAD_VAR 1 
21: LOAD_VAR 0 
22: FUNCALL permute 
23: STORE_VAR 6 out0 int 
24: PUSH_NUMBER 1 
25: STORE_ARRAY 3 depth 
26: LOAD_VAR 5 
27: LOAD_VAR 4 
28: LOAD_VAR 3 
29: LOAD_VAR 2 
30: PUSH_NUMBER 1 
31: PLUS
32: LOAD_VAR 1 
33: LOAD_VAR 0 
34: FUNCALL permute 
35: STORE_VAR 7 out1 int 
36: LOAD_VAR 6 
37: LOAD_VAR 7 
38: IF_LTE_JUMP 42 
39: LOAD_VAR 6 
40: RETURN
41: JUMP 44 
42: LOAD_VAR 7 
43: RETURN
44: NOP
45: JUMP 46 
46: NOP
47: LOAD_VAR 2 
48: LOAD_VAR 0 
49: PUSH_NUMBER 1 
50: MINUS
51: IF_NEQ_JUMP 80 
52: PUSH_NUMBER 0 
53: STORE_ARRAY 3 depth 
54: LOAD_VAR 5 
55: LOAD_VAR 4 
56: LOAD_VAR 3 
57: LOAD_VAR 1 
58: LOAD_VAR 0 
59: FUNCALL evaluate 
60: STORE_VAR 8 out0 int 
61: PUSH_NUMBER 1 
62: STORE_ARRAY 3 depth 
63: LOAD_VAR 5 
64: LOAD_VAR 4 
65: LOAD_VAR 3 
66: LOAD_VAR 1 
67: LOAD_VAR 0 
68: FUNCALL evaluate 
69: STORE_VAR 9 out1 int 
70: LOAD_VAR 8 
71: LOAD_VAR 9 
72: IF_LTE_JUMP 76 
73: LOAD_VAR 8 
74: RETURN
75: JUMP 78 
76: LOAD_VAR 9 
77: RETURN
78: NOP
79: JUMP 80 
80: NOP
0: FUNSTART evaluate int len int maxWeight int_array permutations int_array costs int_array weights  
1: STORE_VAR 0 len int 
2: STORE_VAR 1 maxWeight int 
3: STORE_VAR 2 permutations int_array 
4: STORE_VAR 3 costs int_array 
5: STORE_VAR 4 weights int_array 
6: PUSH_NUMBER 0 
7: STORE_VAR 5 totalWeight int 
8: PUSH_NUMBER 0 
9: STORE_VAR 6 totalCost int 
10: PUSH_NUMBER 0 
11: STORE_VAR 7 i int 
12: JUMP 36 
13: LOAD_ARRAY 2 i 
14: STORE_VAR 8 permutation int 
15: LOAD_VAR 8 
16: PUSH_NUMBER 1 
17: IF_NEQ_JUMP 31 
18: LOAD_ARRAY 4 i 
19: STORE_VAR 9 weight int 
20: LOAD_ARRAY 3 i 
21: STORE_VAR 10 cost int 
22: LOAD_VAR 5 
23: LOAD_VAR 9 
24: PLUS
25: STORE_VAR 5 totalWeight int 
26: LOAD_VAR 6 
27: LOAD_VAR 10 
28: PLUS
29: STORE_VAR 6 totalCost int 
30: JUMP 31 
31: NOP
32: LOAD_VAR 7 
33: PUSH_NUMBER 1 
34: PLUS
35: STORE_VAR 7 i int 
36: LOAD_VAR 7 
37: LOAD_VAR 0 
38: IF_LT_JUMP 13 
39: LOAD_VAR 5 
40: LOAD_VAR 1 
41: IF_LTE_JUMP 45 
42: PUSH_NUMBER 0 
43: RETURN
44: JUMP 47 
45: LOAD_VAR 6 
46: RETURN
47: NOP
